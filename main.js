/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TodosApiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TodosApiPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading Todos REST API plugin");
    const app = this.app;
    const localRestApiPlugin = app.plugins.plugins["obsidian-local-rest-api"];
    if (!localRestApiPlugin) {
      console.error("Local REST API plugin is not available");
      return;
    }
    this.api = localRestApiPlugin.getPublicApi(this.manifest);
    if (!this.api) {
      console.error("Failed to get Local REST API");
      return;
    }
    this.api.addRoute("/todos/").get(async (request, response) => {
      try {
        const app2 = this.app;
        const dataviewPlugin = app2.plugins.plugins.dataview;
        if (!dataviewPlugin) {
          return response.status(503).json({
            error: "Dataview plugin not found",
            message: "Please install and enable the Dataview plugin"
          });
        }
        const dataviewApi = dataviewPlugin.api;
        if (!dataviewApi) {
          return response.status(503).json({
            error: "Dataview API not available",
            message: "Dataview plugin may not be fully loaded"
          });
        }
        const result = await dataviewApi.query("TASK");
        if (!result.successful) {
          return response.status(500).json({
            error: "Query failed",
            message: result.error
          });
        }
        if (result.value.type !== "task") {
          return response.status(500).json({
            error: "Unexpected result type",
            message: `Expected task result, got ${result.value.type}`
          });
        }
        const tasks = this.flattenTasks(result.value.values);
        const params = new URLSearchParams(request.url.split("?")[1] || "");
        const filterCompleted = params.get("completed");
        const filterPath = params.get("path");
        const filterTag = params.get("tag");
        let filteredTasks = tasks;
        if (filterCompleted !== null) {
          const showCompleted = filterCompleted === "true";
          filteredTasks = filteredTasks.filter((task) => task.completed === showCompleted);
        }
        if (filterPath) {
          filteredTasks = filteredTasks.filter(
            (task) => task.path.includes(filterPath)
          );
        }
        if (filterTag) {
          filteredTasks = filteredTasks.filter(
            (task) => task.tags && task.tags.some((tag) => tag.includes(filterTag))
          );
        }
        return response.status(200).json({
          count: filteredTasks.length,
          tasks: filteredTasks
        });
      } catch (error) {
        console.error("Error fetching todos:", error);
        return response.status(500).json({
          error: "Internal server error",
          message: error.message
        });
      }
    });
    console.log("Todos REST API route registered at /todos/");
  }
  /**
   * Flatten the Grouping structure returned by Dataview into a simple array of tasks.
   * The Grouping structure can be nested and contains both individual tasks and groups.
   */
  flattenTasks(grouping) {
    const tasks = [];
    if (Array.isArray(grouping)) {
      for (const item of grouping) {
        if (item.rows) {
          tasks.push(...this.flattenTasks(item.rows));
        } else if (item.task) {
          tasks.push(item);
          if (item.children && item.children.length > 0) {
            tasks.push(...this.flattenTasks(item.children));
          }
        }
      }
    }
    return tasks;
  }
  onunload() {
    if (this.api) {
      this.api.unregister();
    }
    console.log("Unloading Todos REST API plugin");
  }
};
